# tests/conftest.py
import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from backend.api.main import app
from backend.api.core.config import settings

@pytest.fixture(scope="session")
def test_db():
    SQLALCHEMY_TEST_DATABASE_URL = "sqlite:///./test.db"
    engine = create_engine(SQLALCHEMY_TEST_DATABASE_URL)
    TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return TestingSessionLocal()

@pytest.fixture(scope="module")
def test_client():
    with TestClient(app) as client:
        yield client

# tests/test_chat.py
from fastapi.testclient import TestClient
import pytest

def test_chat_endpoint(test_client):
    response = test_client.post(
        "/api/chat/message",
        json={"content": "What's your view on the current market?"}
    )
    assert response.status_code == 200
    assert "response" in response.json()
    assert "confidence" in response.json()

# tests/test_ai_engine.py
import pytest
from ai_engine.inference.engine import SageEngine

@pytest.fixture
def sage_engine():
    return SageEngine()

def test_analyze_query(sage_engine):
    query = "What are the risks in the current market?"
    analysis = sage_engine._determine_intent(query)
    assert analysis == "risk_assessment"

# tests/test_market_data.py
import pytest
from data_pipelines.collectors.market_data import MarketDataCollector

@pytest.fixture
async def market_collector():
    return MarketDataCollector()

@pytest.mark.asyncio
async def test_market_data_collection(market_collector):
    data = await market_collector.collect_market_data()
    assert "price_data" in data
    assert "volume_data" in data
    assert "defi_data" in data
